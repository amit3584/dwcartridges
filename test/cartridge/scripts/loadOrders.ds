/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*-   @input ExampleIn : String This is a sample comment.
*-   @output ExampleOut : Number
*  @output Output1 : String
*
*/
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.net );
importPackage( dw.crypto );

function execute( pdict : PipelineDictionary ) : Number
{
	try {

	var message : String;
	var messageDigest : String;
	var orderWrapper = [];

	try {
		var signer : Mac = new Mac(dw.crypto.Mac.HMAC_SHA_256);

		var orders : Order = OrderMgr.getOrder('00000001');
		message = orders.getOrderExportXML(null, null, false);

		//TODO add code to load all the orders
		//TODO can we use a pipleline to do that for us
		for(var i=0; i<100; i ++){
			orderWrapper.push({ "xmlData" : message });
		}

		var secretKey : String = 'abc';

		messageDigest = Encoding.toBase64( signer.digest(JSON.stringify(orderWrapper), secretKey) );
	}catch(e){
		message = JSON.stringify(e);
	}
	//pdict.Output1 = "test";

	var httpClient : HTTPClient = new HTTPClient();

	httpClient.setRequestHeader('HEADERX', messageDigest);
	httpClient.setRequestHeader('Content-Type', 'application/json');

	var message : String;
	httpClient.open('POST', 'https://api.staging.integrator.io/v1/exports/5799d165a47c08bc28bf5334/data');

	httpClient.send(JSON.stringify(orderWrapper));
	if (httpClient.statusCode == 200)	{
		message = httpClient.text;
	}
	else {
		// error handling
		message="An error occurred with status code "+httpClient.statusCode;
	}
	/*
	var httpSvc : HTTPClient = new HTTPClient();
	httpSvc.open( "POST", "http://requestb.in/1i87g5c1");
	httpSvc.setRequestHeader("Content-Type", "text/html");
	try{
	httpSvc.send(message);
	}catch(e){
	message = JSON.stringify(e);
	}

	pdict.Output1 = message;
	*/
	}catch(e) {
		var s : String = "Fi";
		message = JSON.stringify(e);
	}
	var s : String = "Hola Amigos";
	pdict.Output1 = s;
	return PIPELET_NEXT;
}
